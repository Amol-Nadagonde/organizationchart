{"version":3,"sources":["components/Header.js","components/LeftPanel.js","components/RightPanel.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["SearchedListContent","props","filteredList","map","empItem","index","key","className","onClick","onClickFilteredEmpItem","id","fName","lName","Header","getFilteredEmployeesFromJSON","filteredEmpItem","state","jsonArray","filter","toLowerCase","includes","searchValue","setState","onSearchChange","event","target","value","length","showSearchList","onSearchKeyUp","empId","type","placeholder","onChange","this","onKeyUp","nextProps","prevState","React","Component","LeftPanel","formatContent","empDetailsObj","src","image","alt","designation","location","dob","split","slice","onChangeSelectedEmpId","selectedEmpParentDetails","parentEmpId","parentElement","fetchOriginContent","selectedEmpDetails","selectedEmpParentNode","employeeContent","upTree","SpringAnimation","arrayToAnimate","onClickFunction","animatedTrail","useTrail","from","marginTop","opacity","transform","to","Fragment","div","style","RightPanel","fetchParentEmployeeOfReportees","filteredItem","reporteeArray","downTree","managerDetails","reporteeArrayContent","Footer","App","setHeightOfMainContainer","window","innerHeight","screenHeight","filterEmpInfo","arrayToFilter","selectedEmpId","empInfo","addEventListener","bind","axios","get","then","result","data","height","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sSAEA,SAASA,EAAoBC,GAC3B,OACEA,EAAMC,aAAaC,KAAI,SAACC,EAASC,GAC/B,OACE,yBAAKC,IAAKD,EAAOE,UAAU,mBAAmBC,QAAS,kBAAIP,EAAMQ,uBAAuBL,EAAQM,MAC7FN,EAAQO,MADX,IACmBP,EAAQQ,U,IAoGpBC,E,kDA7Fb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAgBRa,6BAA+B,WAC7B,IAAMC,EAAkB,EAAKC,MAAMC,UAAUC,QAAO,SAACd,EAASC,GAC5D,MAAG,UAAGD,EAAQO,OAAQQ,cAAcC,SAAS,UAAG,EAAKJ,MAAMK,aAAcF,gBAAkB,UAAGf,EAAQQ,OAAQO,cAAcC,SAAS,UAAG,EAAKJ,MAAMK,aAAcF,eACxJf,EACK,QAEhB,EAAKkB,SAAS,CACZpB,aAAca,KAxBC,EA4BnBQ,eAAiB,SAACC,GACZA,EAAMC,OAAOC,MAAMC,QACrB,EAAKL,SAAS,CACZM,gBAAgB,IAGpB,EAAKN,SAAS,CACZD,YAAaG,EAAMC,OAAOC,QACzB,WACD,EAAKZ,6BAA6B,EAAKE,MAAMK,iBArC9B,EAyCnBQ,cAAgB,WACX,EAAKb,MAAMK,YAAYM,QAAU,EAClC,EAAKL,SAAS,CACZM,gBAAgB,IAGlB,EAAKN,SAAS,CACZM,gBAAgB,KAhDH,EAqDnBnB,uBAAyB,SAACqB,GACxB,EAAK7B,MAAMQ,uBAAuBqB,GAClC,EAAKR,SAAS,CACZM,gBAAgB,KAtDlB,EAAKZ,MAAQ,CACXC,UAAW,EAAKhB,MAAMgB,UACtBI,YAAa,GACbO,gBAAgB,EAChB1B,aAAc,IANC,E,qDA4DV,IAAD,OACN,OACE,4BAAQK,UAAU,UACd,6BAASA,UAAU,gBACjB,yBAAKA,UAAU,qBAGjB,6BAASA,UAAU,kBACjB,2BACEA,UAAU,eACVwB,KAAK,SACLC,YAAY,qBACZC,SAAUC,KAAKX,eACfG,MAAOQ,KAAKlB,MAAMK,YAClBc,QAASD,KAAKL,gBAEfK,KAAKlB,MAAMY,gBACV,yBAAKrB,UAAU,qBACZ2B,KAAKlB,MAAMd,aAAayB,OACvB,kBAAC3B,EAAD,CACEE,aAAcgC,KAAKlB,MAAMd,aACzBO,uBAA0B,SAACqB,GAAD,OAAW,EAAKrB,uBAAuBqB,MAHpE,gB,gDArEiBM,EAAWC,GACzC,OAAGA,EAAUpB,YAAcmB,EAAUnB,UAC1B,CACHA,UAAWmB,EAAUnB,WAEf,S,GAfGqB,IAAMC,WC4FZC,E,kDAtGX,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IAkBVwC,cAAgB,SAACC,GACb,OACI,yBAAKnC,UAAU,yBACX,yBAAKA,UAAU,eACX,yBAAKoC,IAAKD,EAAcE,MAAOC,IAAI,cAEvC,uBAAGtC,UAAU,oBAAoBmC,EAAc/B,MAA/C,IAAuD+B,EAAc9B,OACrE,wBAAIL,UAAU,mBAAmBmC,EAAcI,aAC/C,yBAAKvC,UAAU,qBACX,yBAAKA,UAAU,mBACX,uBAAGA,UAAU,gBAAb,QACA,uBAAGA,UAAU,oBAAoBmC,EAAc/B,QAEnD,yBAAKJ,UAAU,mBACX,uBAAGA,UAAU,gBAAb,aACA,uBAAGA,UAAU,oBAAoBmC,EAAc9B,QAEnD,yBAAKL,UAAU,mBACX,uBAAGA,UAAU,gBAAb,MACA,uBAAGA,UAAU,oBAAoBmC,EAAchC,KAEnD,yBAAKH,UAAU,mBACX,uBAAGA,UAAU,gBAAb,YACA,uBAAGA,UAAU,oBAAoBmC,EAAcK,WAEnD,yBAAKxC,UAAU,mBACX,uBAAGA,UAAU,gBAAb,SACA,uBAAGA,UAAU,0BAA0B,UAAGmC,EAAc/B,OAAjB,OAAyB+B,EAAc9B,MAAvC,kBAA6DO,gBAExG,yBAAKZ,UAAU,mBACX,uBAAGA,UAAU,gBAAb,OACA,uBAAGA,UAAU,oBAAoB,UAAGmC,EAAcM,KAAMC,MAAM,KAAK,GAAnE,IAAwE,UAAGP,EAAcM,KAAMC,MAAM,KAAK,GAAGC,MAAM,EAAE,QAlDvH,EAyDlBC,sBAAwB,SAACrB,GACrB,EAAK7B,MAAMkD,sBAAsBrB,IA1DnB,EA6DlBsB,yBAA2B,SAACC,GACxB,IAAMC,EAAgB,EAAKtC,MAAMC,UAAUC,QAAO,SAACd,GAC/C,OAAGA,EAAQM,KAAO2C,EACPjD,EACI,QAEnB,OACI,yBACIM,GAAI4C,EAAc,GAAG5C,GACrBF,QAAS,kBAAI,EAAK2C,sBAAsBG,EAAc,GAAG5C,KACzDH,UAAU,2BAEV,8BAAO+C,EAAc,GAAG3C,MAAxB,IAAgC2C,EAAc,GAAG1C,SAzE3C,EA8ElB2C,mBAAqB,WACjB,OACI,6BAAShD,UAAU,kCACf,yBAAKA,UAAU,sBA/EvB,EAAKS,MAAQ,CACTC,UAAW,EAAKhB,MAAMgB,UACtBuC,mBAAoB,EAAKvD,MAAMuD,mBAC/BC,sBAAuB,EAAKxD,MAAMwD,uBALxB,E,qDAwFd,IAAMC,EAAkBxB,KAAKO,cAAcP,KAAKlB,MAAMwC,oBACtD,OACI,yBAAKjD,UAAU,6CAEN2B,KAAKlB,MAAMwC,mBAAmBG,OAAqCzB,KAAKkB,yBAAyBlB,KAAKlB,MAAMwC,mBAAmBG,QAAxFzB,KAAKqB,qBAEjD,yBAAKhD,UAAU,eACf,yBAAKA,UAAU,8BACdmD,M,gDAvFmBtB,EAAWC,GACvC,OAAGA,EAAUmB,qBAAuBpB,EAAUoB,mBACnC,CACHvC,UAAWmB,EAAUnB,UACrBuC,mBAAoBpB,EAAUoB,mBAC9BC,sBAAuBrB,EAAUqB,uBAE3B,S,GAjBEnB,IAAMC,W,OCCxBqB,EAAkB,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,gBAChCC,EAAgBC,YAASH,EAAelC,OAAQ,CAClDsC,KAAM,CAAEC,WAAY,GAAIC,QAAS,EAAGC,UAAW,0BAC/CC,GAAI,CAAEH,UAAW,GAAIC,QAAS,EAAGC,UAAW,0BAEhD,OACI,kBAAC,IAAME,SAAP,KACGP,EAAc5D,KAAI,SAACF,EAAOI,GACzB,OACI,kBAAC,IAASkE,IAAV,CACIC,MAAOvE,EACPM,UAAU,gBACVD,IAAKD,EACLK,GAAImD,EAAexD,GAAOK,GAC1BF,QAAS,kBAAIsD,EAAgBD,EAAexD,GAAOK,MAEnD,yBAAKH,UAAU,eACX,yBAAKoC,IAAKkB,EAAexD,GAAOuC,MAAOC,IAAI,cAE/C,qCAAOgB,EAAexD,GAAOM,MAA7B,YAAsCkD,EAAexD,GAAOO,QAC5D,4BAAKiD,EAAexD,GAAOyC,mBA4DhC2B,E,kDAnDX,WAAYxE,GAAO,IAAD,8BACd,cAAMA,IAiBVkD,sBAAwB,SAACrB,GACrB,EAAK7B,MAAMkD,sBAAsBrB,IAnBnB,EAsBlB4C,+BAAiC,WAC7B,IAAMC,EAAe,EAAK3D,MAAMC,UAAUC,QAAO,SAAAd,GAC7C,OAAG,EAAKY,MAAM4D,gBAAkBxE,EAAQyE,SAC7BzE,EACG,QAElB,OACI,8BAAOuE,EAAa,GAAGhE,MAAvB,IAA+BgE,EAAa,GAAG/D,QA1BnD,EAAKI,MAAQ,CACTC,UAAW,EAAKhB,MAAMgB,UACtB2D,cAAe,EAAK3E,MAAM2E,eALhB,E,qDAiCT,IAAD,OACEE,EAAiB5C,KAAKwC,iCACtBK,EAAuB7C,KAAKlB,MAAMC,UAAUC,QAAO,SAACd,EAASC,GAC/D,OAAI,EAAKW,MAAM4D,cAAcxD,SAAShB,EAAQM,IACnCN,EACG,QAElB,OACI,yBAAKG,UAAU,6CACX,wBAAIA,UAAU,kBAAkBuE,EAAhC,IAAiDC,EAAqBpD,OAArB,oDACjD,yBAAKpB,UAAU,sBACX,kBAAC,EAAD,CAAiBsD,eAAgBkB,EAAsBjB,gBAAiB5B,KAAKiB,6B,gDAnC7Df,EAAWC,GACvC,OAAGA,EAAUuC,gBAAkBxC,EAAUwC,cAC9B,CACH3D,UAAWmB,EAAUnB,UACrB2D,cAAexC,EAAUwC,eAEnB,S,GAhBGtC,IAAMC,WC7BhB,SAASyC,EAAO/E,GAC3B,OACI,4BAAQM,UAAU,qBACd,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,UAGnB,uD,UC8FG0E,E,kDA5Fb,WAAYhF,GAAO,IAAD,8BAChB,cAAMA,IAURiF,yBAA2B,WACtBC,OAAOC,YAAc,KACtB,EAAK9D,SAAS,CACZ+D,aAAeF,OAAOC,YAAc,IAAO,QAd/B,EAmBlBE,cAAgB,SAACC,EAAeC,EAAeC,GAC7C,IAAMd,EAAeY,EAAcrE,QAAO,SAACd,GACzC,OAAGA,EAAQM,KAAO8E,EACTpF,EACK,QAEhB,MAAe,eAAZqF,EACMd,EAAa,GAEP,iBAAZc,EACMd,EAAa,GAAGE,SAEV,kBAAZY,EACMd,EAAa,GAAGhB,YADzB,GA/BgB,EAkDlBR,sBAAwB,SAACrB,GACvB,EAAKR,UAAS,SAACe,GACb,MAAO,CACLmD,cAAenD,EAAUmD,gBAAkB1D,EAAQA,EAAQO,EAAUP,WAnDzE,EAAKd,MAAQ,CACXqE,aAAcF,OAAOC,YAAc,KACnCI,cAAe,EACfvE,UAAW,GACXuC,mBAAoB,GACpBoB,cAAe,IAPD,E,gEAoCE,IAAD,OACjB1C,KAAKgD,2BACLC,OAAOO,iBAAiB,SAAUxD,KAAKgD,yBAAyBS,KAAKzD,OAErE0D,IAAMC,IAAI,iBACPC,MAAK,SAAAC,GACJ,IAAM9E,EAAY8E,EAAOC,KAEzB,EAAK1E,SAAS,CACZL,UAAWA,S,+BAaV,IAAD,OACN,OAAGiB,KAAKlB,MAAMC,UAAUU,OAEpB,kBAAC,IAAM2C,SAAP,KACE,kBAAC,EAAD,CACErD,UAAWiB,KAAKlB,MAAMC,UACtBR,uBAA0B,SAACqB,GAAD,OAAS,EAAKqB,sBAAsBrB,MAEhE,yBAAKvB,UAAU,YAAYiE,MAAO,CAACyB,OAAO,GAAD,OAAK/D,KAAKlB,MAAMqE,gBACvD,kBAAC,EAAD,CACEpE,UAAWiB,KAAKlB,MAAMC,UACtBuC,mBAAoBtB,KAAKoD,cAAcpD,KAAKlB,MAAMC,UAAWiB,KAAKlB,MAAMwE,cAAe,cACvF/B,sBAAuBvB,KAAKoD,cAAcpD,KAAKlB,MAAMC,UAAWiB,KAAKlB,MAAMwE,cAAe,iBAC1FrC,sBAAuB,SAACrB,GAAD,OAAS,EAAKqB,sBAAsBrB,MAE7D,kBAAC,EAAD,CACEb,UAAWiB,KAAKlB,MAAMC,UACtB2D,cAAe1C,KAAKoD,cAAcpD,KAAKlB,MAAMC,UAAWiB,KAAKlB,MAAMwE,cAAe,gBAClFrC,sBAAuB,SAACrB,GAAD,OAAS,EAAKqB,sBAAsBrB,OAG/D,kBAACkD,EAAD,OAKF,yBAAKzE,UAAU,WAAf,kB,GArFU+B,IAAMC,WCEJ2D,QACW,cAA7Bf,OAAOpC,SAASoD,UAEe,UAA7BhB,OAAOpC,SAASoD,UAEhBhB,OAAOpC,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d8ced878.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction SearchedListContent(props){\r\n  return(\r\n    props.filteredList.map((empItem, index) => {\r\n      return (\r\n        <div key={index} className=\"search-list-item\" onClick={()=>props.onClickFilteredEmpItem(empItem.id)}>\r\n          {empItem.fName} {empItem.lName}\r\n        </div>\r\n      )\r\n    })\r\n  )\r\n}\r\nclass Header extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jsonArray: this.props.jsonArray,\r\n      searchValue: '',\r\n      showSearchList: false,\r\n      filteredList: []\r\n    }\r\n  }\r\n  static getDerivedStateFromProps(nextProps, prevState){\r\n    if(prevState.jsonArray !== nextProps.jsonArray){\r\n        return {\r\n            jsonArray: nextProps.jsonArray\r\n        }\r\n    } else return null;\r\n  }\r\n\r\n  getFilteredEmployeesFromJSON = () => {\r\n    const filteredEmpItem = this.state.jsonArray.filter((empItem, index) => {\r\n      if(`${empItem.fName}`.toLowerCase().includes(`${this.state.searchValue}`.toLowerCase()) || `${empItem.lName}`.toLowerCase().includes(`${this.state.searchValue}`.toLowerCase())){\r\n        return empItem\r\n      } else return null\r\n    });\r\n    this.setState({\r\n      filteredList: filteredEmpItem\r\n    });\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    if(!event.target.value.length){\r\n      this.setState({\r\n        showSearchList: false\r\n      })\r\n    }\r\n    this.setState({\r\n      searchValue: event.target.value\r\n    }, () => {\r\n      this.getFilteredEmployeesFromJSON(this.state.searchValue);\r\n    });\r\n  }\r\n\r\n  onSearchKeyUp = () => {\r\n    if(this.state.searchValue.length >= 3){\r\n      this.setState({\r\n        showSearchList: true\r\n      })\r\n    } else {\r\n      this.setState({\r\n        showSearchList: false\r\n      })\r\n    }\r\n  }\r\n\r\n  onClickFilteredEmpItem = (empId) => {\r\n    this.props.onClickFilteredEmpItem(empId);\r\n    this.setState({\r\n      showSearchList: false\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <header className=\"header\">\r\n          <section className=\"logo-section\">\r\n            <div className=\"logo colorwhite\">\r\n            </div>\r\n          </section>\r\n          <section className=\"search-section\">\r\n            <input \r\n              className=\"search-input\"\r\n              type=\"search\"\r\n              placeholder=\"Search employee...\"\r\n              onChange={this.onSearchChange}\r\n              value={this.state.searchValue}\r\n              onKeyUp={this.onSearchKeyUp}\r\n            />\r\n            {this.state.showSearchList && \r\n              <div className=\"search-list-panel\">\r\n                {this.state.filteredList.length ?\r\n                  <SearchedListContent \r\n                    filteredList={this.state.filteredList} \r\n                    onClickFilteredEmpItem = {(empId) => this.onClickFilteredEmpItem(empId)}\r\n                  />\r\n                  : `Loading`\r\n                }\r\n              </div>\r\n            }\r\n          </section>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nclass LeftPanel extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            jsonArray: this.props.jsonArray,\r\n            selectedEmpDetails: this.props.selectedEmpDetails,\r\n            selectedEmpParentNode: this.props.selectedEmpParentNode\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        if(prevState.selectedEmpDetails !== nextProps.selectedEmpDetails){\r\n            return {\r\n                jsonArray: nextProps.jsonArray,\r\n                selectedEmpDetails: nextProps.selectedEmpDetails,\r\n                selectedEmpParentNode: nextProps.selectedEmpParentNode\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n    formatContent = (empDetailsObj) => {\r\n        return (\r\n            <div className=\"emp-details-container\">\r\n                <div className=\"img-section\">\r\n                    <img src={empDetailsObj.image} alt=\"employee\" />\r\n                </div>\r\n                <p className=\"emp-name-section\">{empDetailsObj.fName} {empDetailsObj.lName}</p>\r\n                <h4 className=\"emp-designation\">{empDetailsObj.designation}</h4>\r\n                <div className=\"emp-details-table\">\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Name</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.fName}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Last Name</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.lName}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Id</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.id}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Location</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.location}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Email</p>\r\n                        <p className=\"emp-detail-value email\">{`${empDetailsObj.fName}${empDetailsObj.lName}@borngroup.com`.toLowerCase()}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">DoB</p>\r\n                        <p className=\"emp-detail-value\">{`${empDetailsObj.dob}`.split(' ')[0]} {`${empDetailsObj.dob}`.split(' ')[1].slice(0,3)}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onChangeSelectedEmpId = (empId) => {\r\n        this.props.onChangeSelectedEmpId(empId);\r\n    }\r\n\r\n    selectedEmpParentDetails = (parentEmpId) => {\r\n        const parentElement = this.state.jsonArray.filter((empItem)=>{\r\n            if(empItem.id === parentEmpId){\r\n                return empItem\r\n            } else  return null\r\n        });\r\n        return (\r\n            <div \r\n                id={parentElement[0].id} \r\n                onClick={()=>this.onChangeSelectedEmpId(parentElement[0].id)}\r\n                className=\"parent-employee-section\"\r\n            >\r\n                <span>{parentElement[0].fName} {parentElement[0].lName}</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    fetchOriginContent = () => {\r\n        return(\r\n            <section className=\"logo-section text-align-center\">\r\n                <div className=\"logo colorwhite\">\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        const employeeContent = this.formatContent(this.state.selectedEmpDetails);\r\n        return(\r\n            <div className=\"left-panel-container padding10 colorwhite\">\r\n                {\r\n                    !this.state.selectedEmpDetails.upTree ? this.fetchOriginContent() : this.selectedEmpParentDetails(this.state.selectedEmpDetails.upTree)\r\n                }\r\n                <div className=\"arrow-down\"></div>\r\n                <div className=\"arrow-down marginadjusted\"></div>\r\n                {employeeContent}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeftPanel;\r\n","import React from 'react';\r\nimport {useTrail, animated} from 'react-spring';\r\n\r\nconst SpringAnimation = ({arrayToAnimate, onClickFunction}) => {\r\n    const animatedTrail = useTrail(arrayToAnimate.length, {\r\n        from: { marginTop: -20, opacity: 0, transform: 'translate3d(0,-20px,0)' },\r\n        to: { marginTop: 20, opacity: 1, transform: 'translate3d(0,0px,0)' }\r\n    });\r\n    return (\r\n        <React.Fragment>\r\n          {animatedTrail.map((props, index)=>{\r\n            return(\r\n                <animated.div \r\n                    style={props} \r\n                    className=\"reportee-item\"\r\n                    key={index} \r\n                    id={arrayToAnimate[index].id}\r\n                    onClick={()=>onClickFunction(arrayToAnimate[index].id)}\r\n                >\r\n                    <div className=\"img-section\">\r\n                        <img src={arrayToAnimate[index].image} alt=\"employee\" />\r\n                    </div>\r\n                    <p>{`${arrayToAnimate[index].fName} ${arrayToAnimate[index].lName}`}</p>\r\n                    <h4>{arrayToAnimate[index].designation}</h4>\r\n                </animated.div>\r\n            )\r\n          })}\r\n        </React.Fragment>\r\n      )\r\n}\r\n\r\nclass RightPanel extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            jsonArray: this.props.jsonArray,\r\n            reporteeArray: this.props.reporteeArray\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        if(prevState.reporteeArray !== nextProps.reporteeArray){\r\n            return {\r\n                jsonArray: nextProps.jsonArray,\r\n                reporteeArray: nextProps.reporteeArray\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n    onChangeSelectedEmpId = (empId) => {\r\n        this.props.onChangeSelectedEmpId(empId);\r\n    }\r\n\r\n    fetchParentEmployeeOfReportees = () => {\r\n        const filteredItem = this.state.jsonArray.filter(empItem => {\r\n            if(this.state.reporteeArray === empItem.downTree){\r\n                return empItem\r\n            } else return null\r\n        });\r\n        return(\r\n            <span>{filteredItem[0].fName} {filteredItem[0].lName}</span>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        const managerDetails = this.fetchParentEmployeeOfReportees();\r\n        const reporteeArrayContent = this.state.jsonArray.filter((empItem, index)=>{\r\n            if( this.state.reporteeArray.includes(empItem.id) ){\r\n                return empItem\r\n            } else return null\r\n        });\r\n        return (\r\n            <div className=\"right-panel-container padding10 fullwidth\">\r\n                <h3 className=\"reportee-title\">{managerDetails} {reporteeArrayContent.length ? `has the following reportees:` : `has no reportees.`}</h3>\r\n                <div className=\"reportee-container\">\r\n                    <SpringAnimation arrayToAnimate={reporteeArrayContent} onClickFunction={this.onChangeSelectedEmpId} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RightPanel;\r\n","import React from 'react';\r\n\r\nexport default function Footer(props) {\r\n    return (\r\n        <footer className=\"footer colorwhite\">\r\n            <div className=\"logo-watermark\">\r\n                <div className=\"logo\">\r\n                </div>\r\n            </div>\r\n            <p>2020 &copy; BORNGROUP.COM</p>\r\n        </footer>\r\n    )\r\n}","import React from 'react';\nimport axios from 'axios';\n\nimport Header from \"./components/Header\";\nimport LeftPanel from \"./components/LeftPanel\";\nimport RightPanel from \"./components/RightPanel\";\nimport Footer from \"./components/Footer\";\n\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      screenHeight: window.innerHeight + 'px',\n      selectedEmpId: 1, /* this property tells which employee is selected to show details on the screen */\n      jsonArray: [], /* it is the array of empolyees retrived from database */\n      selectedEmpDetails: {}, /* filtered the details of employee, we need to show on left panel */\n      reporteeArray: [] /* filtered the reportees of selected employee to show in the right panel */\n    }\n  }\n\n  setHeightOfMainContainer = () => {\n    if(window.innerHeight > 500){\n      this.setState({\n        screenHeight: (window.innerHeight - 100) + 'px',\n      })\n    }\n  }\n\n  filterEmpInfo = (arrayToFilter, selectedEmpId, empInfo) => {\n    const filteredItem = arrayToFilter.filter((empItem)=>{\n      if(empItem.id === selectedEmpId){\n        return empItem\n      } else return null\n    });\n    if(empInfo === \"empDetails\"){\n      return filteredItem[0];\n    } \n    if(empInfo === \"empReportees\") {\n      return filteredItem[0].downTree\n    }\n    if(empInfo === \"empParentNode\") {\n      return filteredItem[0].upTree\n    }\n  }  \n\n  componentDidMount(){\n    this.setHeightOfMainContainer();\n    window.addEventListener(\"resize\", this.setHeightOfMainContainer.bind(this));\n    \n    axios.get(\"orgchart.json\")\n      .then(result => {\n        const jsonArray = result.data;\n\n        this.setState({ \n          jsonArray: jsonArray,\n        });\n      });\n  }\n\n  onChangeSelectedEmpId = (empId) => {\n    this.setState((prevState)=>{\n      return {\n        selectedEmpId: prevState.selectedEmpId !== empId ? empId : prevState.empId\n      }\n    });\n  }\n\n  render(){\n    if(this.state.jsonArray.length){\n      return(\n        <React.Fragment>\n          <Header\n            jsonArray={this.state.jsonArray}\n            onClickFilteredEmpItem = {(empId)=>this.onChangeSelectedEmpId(empId)}\n          />\n          <div className=\"main-body\" style={{height: `${this.state.screenHeight}`}}>\n            <LeftPanel \n              jsonArray={this.state.jsonArray}\n              selectedEmpDetails={this.filterEmpInfo(this.state.jsonArray, this.state.selectedEmpId, \"empDetails\")}\n              selectedEmpParentNode={this.filterEmpInfo(this.state.jsonArray, this.state.selectedEmpId, \"empParentNode\")}\n              onChangeSelectedEmpId={(empId)=>this.onChangeSelectedEmpId(empId)}\n            />\n            <RightPanel \n              jsonArray={this.state.jsonArray}\n              reporteeArray={this.filterEmpInfo(this.state.jsonArray, this.state.selectedEmpId, \"empReportees\")}\n              onChangeSelectedEmpId={(empId)=>this.onChangeSelectedEmpId(empId)}\n            /> \n          </div>\n          <Footer />\n        </React.Fragment>\n      )\n    } else {\n      return (\n        <div className=\"loading\">\n          Loading...\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}