{"version":3,"sources":["components/Header.js","components/LeftPanel.js","components/RightPanel.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","type","placeholder","LeftPanel","props","formatContent","empDetailsObj","src","image","alt","fName","lName","designation","id","location","toLowerCase","dob","split","slice","onChangeSelectedEmpId","empId","selectedEmpParentDetails","parentEmpId","parentElement","state","jsonArray","filter","empItem","onClick","fetchOriginContent","selectedEmpDetails","selectedEmpParentNode","employeeContent","this","upTree","nextProps","prevState","React","Component","RightPanel","fetchParentEmployeeOfReportees","filteredItem","reporteeArray","downTree","tempArray","managerDetails","reporteeArrayContent","index","includes","map","key","Footer","App","setHeightOfMainContainer","window","innerHeight","setState","screenHeight","filterEmpInfo","arrayToFilter","selectedEmpId","empInfo","addEventListener","bind","axios","get","then","result","data","length","Fragment","style","height","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f19c9d20.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n        <section className=\"logo-section\">\r\n          <div className=\"logo colorwhite\">\r\n          </div>\r\n        </section>\r\n        <section className=\"search-section\">\r\n          <input \r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n          />\r\n          <input \r\n              type=\"submit\"\r\n          />\r\n        </section>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nclass LeftPanel extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            jsonArray: this.props.jsonArray,\r\n            selectedEmpDetails: this.props.selectedEmpDetails,\r\n            selectedEmpParentNode: this.props.selectedEmpParentNode\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        if(prevState.selectedEmpDetails !== nextProps.selectedEmpDetails){\r\n            return {\r\n                jsonArray: nextProps.jsonArray,\r\n                selectedEmpDetails: nextProps.selectedEmpDetails,\r\n                selectedEmpParentNode: nextProps.selectedEmpParentNode\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n    formatContent = (empDetailsObj) => {\r\n        return (\r\n            <div className=\"emp-details-container\">\r\n                <div className=\"img-section\">\r\n                    <img src={empDetailsObj.image} alt=\"employee\" />\r\n                </div>\r\n                <p className=\"emp-name-section\">{empDetailsObj.fName} {empDetailsObj.lName}</p>\r\n                <h4 className=\"emp-designation\">{empDetailsObj.designation}</h4>\r\n                <div className=\"emp-details-table\">\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Name</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.fName}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Last Name</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.lName}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Id</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.id}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Location</p>\r\n                        <p className=\"emp-detail-value\">{empDetailsObj.location}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">Email</p>\r\n                        <p className=\"emp-detail-value email\">{`${empDetailsObj.fName}${empDetailsObj.lName}@borngroup.com`.toLowerCase()}</p>\r\n                    </div>\r\n                    <div className=\"emp-details-row\">\r\n                        <p className=\"emp-property\">DoB</p>\r\n                        <p className=\"emp-detail-value\">{`${empDetailsObj.dob}`.split(' ')[0]} {`${empDetailsObj.dob}`.split(' ')[1].slice(0,3)}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    onChangeSelectedEmpId = (empId) => {\r\n        this.props.onChangeSelectedEmpId(empId);\r\n    }\r\n\r\n    selectedEmpParentDetails = (parentEmpId) => {\r\n        const parentElement = this.state.jsonArray.filter((empItem)=>{\r\n            if(empItem.id === parentEmpId){\r\n                return empItem\r\n            } else  return null\r\n        });\r\n        return (\r\n            <div \r\n                id={parentElement[0].id} \r\n                onClick={()=>this.onChangeSelectedEmpId(parentElement[0].id)}\r\n                className=\"parent-employee-section\"\r\n            >\r\n                <span>{parentElement[0].fName} {parentElement[0].lName}</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    fetchOriginContent = () => {\r\n        return(\r\n            <section className=\"logo-section text-align-center\">\r\n                <div className=\"logo colorwhite\">\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        const employeeContent = this.formatContent(this.state.selectedEmpDetails);\r\n        return(\r\n            <div className=\"left-panel-container padding10 colorwhite\">\r\n                {\r\n                    !this.state.selectedEmpDetails.upTree ? this.fetchOriginContent() : this.selectedEmpParentDetails(this.state.selectedEmpDetails.upTree)\r\n                }\r\n                <div className=\"arrow-down\"></div>\r\n                <div className=\"arrow-down marginadjusted\"></div>\r\n                {employeeContent}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeftPanel;\r\n","import React from 'react';\r\n\r\nclass RightPanel extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            jsonArray: this.props.jsonArray,\r\n            reporteeArray: this.props.reporteeArray,\r\n            tempArray: [] /* this array is to render the reportee one after another */\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState){\r\n        if(prevState.reporteeArray !== nextProps.reporteeArray){\r\n            return {\r\n                jsonArray: nextProps.jsonArray,\r\n                reporteeArray: nextProps.reporteeArray\r\n            }\r\n        } else return null;\r\n    }\r\n\r\n    onChangeSelectedEmpId = (empId) => {\r\n        this.props.onChangeSelectedEmpId(empId);\r\n    }\r\n\r\n    fetchParentEmployeeOfReportees = () => {\r\n        const filteredItem = this.state.jsonArray.filter(empItem => {\r\n            if(this.state.reporteeArray === empItem.downTree){\r\n                return empItem\r\n            } else return null\r\n        });\r\n        return(\r\n            <span>{filteredItem[0].fName} {filteredItem[0].lName}</span>\r\n        )\r\n    }\r\n\r\n    render(){\r\n        const managerDetails = this.fetchParentEmployeeOfReportees();\r\n        const reporteeArrayContent = this.state.jsonArray.filter((empItem, index)=>{\r\n            if( this.state.reporteeArray.includes(empItem.id) ){\r\n                return empItem\r\n            } else return null\r\n        }).map((empItem, index)=>{\r\n            return(\r\n                <div className=\"reportee-item\" key={index} onClick={()=>this.onChangeSelectedEmpId(empItem.id)}>\r\n                    <div className=\"img-section\">\r\n                        <img src={empItem.image} alt=\"employee\" />\r\n                    </div>\r\n                    <p>{`${empItem.fName} ${empItem.lName}`}</p>\r\n                    <h4>{empItem.designation}</h4>\r\n                </div>\r\n            )            \r\n        })\r\n        return (\r\n            <div className=\"right-panel-container padding10 fullwidth\">\r\n                <h3 className=\"reportee-title\">{managerDetails} has the following reportees:</h3>\r\n                <div className=\"reportee-container\">\r\n                    {reporteeArrayContent}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RightPanel;\r\n","import React from 'react';\r\n\r\nexport default function Footer(props) {\r\n    return (\r\n        <footer className=\"footer colorwhite\">\r\n            <div className=\"logo-watermark\">\r\n                <div className=\"logo\">\r\n                </div>\r\n            </div>\r\n            <p>2020 &copy; BORNGROUP.COM</p>\r\n        </footer>\r\n    )\r\n}","import React from 'react';\nimport axios from 'axios';\n\nimport Header from \"./components/Header\";\nimport LeftPanel from \"./components/LeftPanel\";\nimport RightPanel from \"./components/RightPanel\";\nimport Footer from \"./components/Footer\";\n\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      screenHeight: window.innerHeight + 'px',\n      selectedEmpId: 1, /* this property tells which employee is selected to show details on the screen */\n      jsonArray: [], /* it is the array of empolyees retrived from database */\n      selectedEmpDetails: {}, /* filtered the details of employee, we need to show on left panel */\n      reporteeArray: [] /* filtered the reportees of selected employee to show in the right panel */\n    }\n  }\n\n  setHeightOfMainContainer = () => {\n    if(window.innerHeight > 500){\n      this.setState({\n        screenHeight: (window.innerHeight - 100) + 'px',\n      })\n    }\n  }\n\n  filterEmpInfo = (arrayToFilter, selectedEmpId, empInfo) => {\n    const filteredItem = arrayToFilter.filter((empItem)=>{\n      if(empItem.id === selectedEmpId){\n        return empItem\n      } else return null\n    });\n    if(empInfo === \"empDetails\"){\n      return filteredItem[0];\n    } \n    if(empInfo === \"empReportees\") {\n      return filteredItem[0].downTree\n    }\n    if(empInfo === \"empParentNode\") {\n      return filteredItem[0].upTree\n    }\n  }  \n\n  componentDidMount(){\n    this.setHeightOfMainContainer();\n    window.addEventListener(\"resize\", this.setHeightOfMainContainer.bind(this));\n    \n    axios.get(\"orgchart.json\")\n      .then(result => {\n        const jsonArray = result.data;\n\n        this.setState({ \n          jsonArray: jsonArray,\n        });\n      });\n  }\n\n  onChangeSelectedEmpId = (empId) => {\n    this.setState((prevState)=>{\n      return {\n        selectedEmpId: prevState.selectedEmpId !== empId ? empId : prevState.empId\n      }\n    });\n  }\n\n  render(){\n    if(this.state.jsonArray.length){\n      return(\n        <React.Fragment>\n          <Header/>\n          <div className=\"main-body\" style={{height: `${this.state.screenHeight}`}}>\n            <LeftPanel \n              jsonArray={this.state.jsonArray}\n              selectedEmpDetails={this.filterEmpInfo(this.state.jsonArray, this.state.selectedEmpId, \"empDetails\")}\n              selectedEmpParentNode={this.filterEmpInfo(this.state.jsonArray, this.state.selectedEmpId, \"empParentNode\")}\n              onChangeSelectedEmpId={(empId)=>this.onChangeSelectedEmpId(empId)}\n            />\n            <RightPanel \n              jsonArray={this.state.jsonArray}\n              reporteeArray={this.filterEmpInfo(this.state.jsonArray, this.state.selectedEmpId, \"empReportees\")}\n              onChangeSelectedEmpId={(empId)=>this.onChangeSelectedEmpId(empId)}\n            /> \n          </div>\n          <Footer />\n        </React.Fragment>\n      )\n    } else {\n      return (\n        <div className=\"loading\">\n          Loading...\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}